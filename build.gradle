plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '[1,2)'
    id 'org.groovymc.modsdotgroovy' version '[1.4,2)'
    id 'org.moddingx.modgradle.mapping' version '[4,5)'
}

version = "${mc_version}-${mod_version}"
group = mod_vendor_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mc_mappings_channel, version: mc_mappings_version

    //enableEclipsePrepareRuns = true
    //enableIdeaPrepareRuns = true

    copyIdeResources = true

    //generateRunFolders = true

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property "${mod_id}.iside", 'true'

            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            property "${mod_id}.datagen", 'true'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir 'src/main/js'
}

modsDotGroovy {
    dslVersion = '1.5.0'
    platform = 'forge'
}

repositories {
    mavenLocal()
    maven { url 'https://maven.moddinglegacy.com/maven' }
    maven {
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    // Minecraft Forge
    minecraft("net.minecraftforge:${forge_toolchain}:${mc_version}-${forge_version}")

    // Mixin
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    // Galosphere
    runtimeOnly(fg.deobf("curse.maven:galosphere-631098:${galosphere_version_curseforge}"))
    compileOnly(fg.deobf("net.orcinus.galosphere:Galosphere:${mc_version}-${galosphere_version}-galoblender"))

    // Terrablender
    implementation(fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${terrablender_version}"))
}

mixin {
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : mod_vendor,
            'Specification-Version'   : '1', // We are version 1 of ourselves
            'Implementation-Title'    : mod_name,
            'Implementation-Version'  : jar.archiveVersion,
            'Implementation-Vendor'   : mod_vendor,
            'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

// Use UTF-8
afterEvaluate {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        defaultCharacterEncoding = 'UTF-8'
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
