import net.minecraftforge.gradle.userdev.tasks.JarJar

plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '[0.7,0.8)'
    id 'org.parchmentmc.librarian.forgegradle' version '[1,2)'
    id 'org.groovymc.modsdotgroovy' version '[1.4,2)'
    id 'org.moddingx.modgradle.mapping' version '[4,5)'
    id 'io.github.0ffz.github-packages' version '[1,2)'
}

version = "${mc_version}-${mod_version}"
group = mod_vendor_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html

base {
    archivesName = mod_id
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mc_mappings_channel, version: mc_mappings_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    //enableEclipsePrepareRuns = true
    //enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    //generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Applies a JVM property which can be referenced in your code to check if you are running in IDE/Gradle.
            property "${mod_id}.iside", 'true'

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id

            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            property "${mod_id}.datagen", 'true'

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources {
    srcDir 'src/generated/resources'
    srcDir 'src/main/js'
}

modsDotGroovy {
    dslVersion = '1.5.0'
    platform = 'forge'
}

repositories {
    mavenLocal()
    maven { url 'https://maven.moddinglegacy.com/maven' }
    maven {
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
}

dependencies {
    // Minecraft Forge
    minecraft("net.minecraftforge:${forge_toolchain}:${mc_version}-${forge_version}")

    // Mixin
    annotationProcessor("org.spongepowered:mixin:${mixin_version}:processor")

    // Galosphere
    runtimeOnly(fg.deobf("curse.maven:galosphere-631098:${galosphere_version}"))
    compileOnly(fg.deobf("net.orcinus:galosphere:1.19.2-1.3.0-genesis"))

    // Terrablender
    implementation(fg.deobf("com.github.glitchfiend:TerraBlender-forge:${mc_version}-${terrablender_version}"))
}

mixin {
    debug.export = true
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            'Specification-Title'     : mod_id,
            'Specification-Vendor'    : mod_vendor,
            'Specification-Version'   : '1', // We are version 1 of ourselves
            'Implementation-Title'    : mod_name,
            'Implementation-Version'  : jar.archiveVersion,
            'Implementation-Vendor'   : mod_vendor,
            'Implementation-Timestamp': new Date().format('yyyy-MM-dd\'T\'HH:mm:ssZ')
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'

    archiveClassifier = 'no-embeds'
}

tasks.named('jarJar', JarJar).configure {
    finalizedBy 'reobfJarJar'

    archiveClassifier = ''
}

tasks.named('build', DefaultTask).configure {
    dependsOn 'jarJar'
}

// Use UTF-8
afterEvaluate {
    tasks.withType(JavaCompile).configureEach {
        options.encoding = 'UTF-8'
    }

    tasks.withType(Test).configureEach {
        defaultCharacterEncoding = 'UTF-8'
    }

    tasks.withType(Javadoc).configureEach {
        options.encoding = 'UTF-8'
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
